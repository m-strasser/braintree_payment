<?php

/**
 * @file
 * Defines Credit Card Controller Information and libraries.
 */

use Drupal\braintree_payment\ApplePayController;
use Drupal\braintree_payment\CreditCardController;
use Drupal\braintree_payment\GooglePayController;

/**
 * Implemnts hook_theme().
 */
function braintree_payment_theme() {
  $hooks['braintree_payment_hosted_field'] = [
    'render element' => 'element',
    'template' => 'braintree-payment-hosted-field',
    'file' => 'braintree_payment.theme.inc',
  ];
  return $hooks;
}

/**
 * Implements hook_payment_method_controller_info().
 */
function braintree_payment_payment_method_controller_info() {
  $info['braintree_payment_credit_card'] = CreditCardController::class;
  $info['braintree_payment_google_pay'] = GooglePayController::class;
  $info['braintree_payment_apple_pay'] = ApplePayController::class;
  return $info;
}

/**
 * Implements hook_libraries_info().
 *
 * For braintree php wrapper library.
 */
function braintree_payment_libraries_info() {
  $libraries['braintree-php'] = array(
    'name' => 'Braintree',
    'vendor url' => 'https://www.braintreepayments.com/',
    'download url' => 'https://developers.braintreepayments.com/start/hello-server/php',
    'version arguments' => array(
      'file' => 'CHANGELOG.md',
      'pattern' => '/([0-9\.]+)/',
      'lines' => 1,
    ),
    'xautoload' => function ($adapter) {
      $adapter->composerJson('composer.json');
    },
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function braintree_payment_menu() {
  $items = [];
  // Provide the Domain Association File for Apple Pay.
  $apple_pay_methods = array_filter(entity_load('payment_method'), function ($m) {
    return $m->controller instanceof ApplePayController && $m->enabled;
  });
  if (!empty($apple_pay_methods)) {
    $items['.well-known/apple-developer-merchantid-domain-association'] = [
      'title' => 'Apple Developer MerchantID Domain Association',
      'access callback' => TRUE,
      'page callback' => 'braintree_payment_apple_pay_domain_association_file',
    ];
  }
  return $items;
}

/**
 * Menu callback returning the Braintree Domain Association File for Apple Pay.
 *
 * The file is a copy of
 * https://assets.braintreegateway.com/web/static/apple-pay/apple-developer-merchantid-domain-association.
 */
function braintree_payment_apple_pay_domain_association_file() {
  drupal_add_http_header('Content-type', 'application/octet-stream');
  $path = drupal_get_path('module', 'braintree_payment');
  $path .= '/static/apple-developer-merchantid-domain-association';
  readfile($path);
  drupal_page_footer();
  exit;
}

/**
 * Implements hook_entity_load().
 */
function braintree_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment') {
    $query = db_select('braintree_payment', 't')
      ->fields('t')
      ->condition('pid', array_keys($entities));
    $result = $query->execute();
    while ($data = $result->fetchAssoc()) {
      $payment = $entities[$data['pid']];
      $payment->braintree = [
        'braintree_id' => $data['braintree_id'],
        'type' => $data['type'],
        'plan_id' => $data['plan_id'],
      ];
    }
  }
}

/**
 * Implements hook_payment_insert().
 */
function braintree_payment_payment_insert(Payment $payment) {
  if (_braintree_payment_controlled_payment_method($payment->method)) {
    $data = !empty($payment->braintree) ? $payment->braintree : [];
    $data += [
      'braintree_id' => '',
      'type' => '',
      'plan_id' => '',
    ];
    $data['pid'] = $payment->pid;
    db_insert('braintree_payment')->fields($data)->execute();
  }
}

/**
 * Implements hook_payment_update().
 */
function braintree_payment_payment_update(Payment $payment) {
  if (_braintree_payment_controlled_payment_method($payment->method)) {
    $data = !empty($payment->braintree) ? $payment->braintree : [];
    $data += [
      'braintree_id' => '',
      'type' => '',
      'plan_id' => '',
    ];
    db_update('braintree_payment')
      ->fields($data)
      ->condition('pid', $payment->pid)
      ->execute();
  }
}

/**
 * Implements hook_payment_delete().
 */
function braintree_payment_payment_delete(Payment $payment) {
  db_delete('braintree_payment')->condition('pid', $payment->pid)->execute();
}

/**
 * Implements hook_campaignion_logcrm_payment_event_data_alter().
 */
function braintree_payment_campaignion_logcrm_payment_event_data_alter(array &$data, Payment $payment) {
  if (_braintree_payment_controlled_payment_method($payment->method)) {
    $data['braintree_id'] = NULL;
    if (!empty($payment->braintree['braintree_id'])) {
      $data['braintree_id'] = $payment->braintree['braintree_id'];
    }
  }
}

/**
 * Element validate callback: Comma separated keys.
 */
function _braintree_payment_validate_comma_separated_keys($element, &$form_state, $form) {
  $keys = array_map('trim', explode(',', $element['#value']));
  form_set_value($element, $keys, $form_state);
}

/**
 * Element process function for hosted fields.
 */
function braintree_payment_hosted_fields_process($element) {
  $element['#input'] = FALSE;
  array_unshift($element['#theme_wrappers'], 'braintree_payment_hosted_field');
  return $element;
}

/**
 * Helper function to check if a payment method uses a Braintree controller.
 */
function _braintree_payment_controlled_payment_method(\PaymentMethod $method) {
  $info = braintree_payment_payment_method_controller_info();
  return isset($info[$method->controller->name]);
}
